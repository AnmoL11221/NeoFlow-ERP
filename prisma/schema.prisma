// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  passwordHash String?
  emailVerified DateTime?
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  clients   Client[]
  projects  Project[]
  invoices  Invoice[]
  accounts  Account[]

  @@map("users")
}

// NextAuth adapter models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @map("refreshToken")
  access_token      String? @map("accessToken")
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Client {
  id        String   @id @default(cuid())
  name      String
  email     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  projects  Project[]

  @@map("clients")
}

model Project {
  id            String        @id @default(cuid())
  name          String
  description   String
  status        ProjectStatus @default(PROPOSED)
  estimatedCost Decimal?
  actualCost    Decimal?
  currency      String        @default("USD")
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  userId   String
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  clientId String
  client   Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  invoices Invoice[]
  recommendations ProjectFreelancerRecommendation[]
  proposals       Proposal[]

  @@map("projects")
  @@index([userId, clientId])
  @@index([status])
}

model Invoice {
  id            String        @id @default(cuid())
  invoiceNumber String        @unique
  status        InvoiceStatus @default(DRAFT)
  amount        Decimal
  issueDate     DateTime
  dueDate       DateTime
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("invoices")
  @@index([userId, projectId])
  @@index([status])
}

enum ProjectStatus {
  PROPOSED
  ACTIVE
  COMPLETED
  PAUSED
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
}

// Marketplace models
model FreelancerProfile {
  id          String   @id @default(cuid())
  name        String
  email       String   @unique
  bio         String?
  skills      String   // comma-separated tags for simplicity
  hourlyRate  Decimal?
  rating      Float?   // 0-5
  availability String? // e.g., full-time, part-time, weekends
  location    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  recommendations ProjectFreelancerRecommendation[]

  @@map("freelancers")
}

model ProjectFreelancerRecommendation {
  id           String   @id @default(cuid())
  projectId    String
  freelancerId String
  score        Float
  rationale    String
  shortlisted  Boolean  @default(false)
  createdAt    DateTime @default(now())

  project    Project           @relation(fields: [projectId], references: [id], onDelete: Cascade)
  freelancer FreelancerProfile @relation(fields: [freelancerId], references: [id], onDelete: Cascade)

  @@map("project_freelancer_recos")
  @@index([projectId])
  @@index([freelancerId])
  @@unique([projectId, freelancerId])
}

model Proposal {
  id        String   @id @default(cuid())
  projectId String
  content   String   // markdown content
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@map("proposals")
}
